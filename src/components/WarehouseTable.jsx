import React, { useState } from "react";
import axios from "axios";

const popularTypes = ["–•—É–¥–∏", "–§—É—Ç–±–æ–ª–∫–∞", "–ö–æ—Ñ—Ç–∞", "–°–≤–∏—Ç—à–æ—Ç", "–ú–∞–π–∫–∞"];
const popularColors = ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–°–µ—Ä—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π"];
const popularSizes = ["S", "M", "L", "XL", "XXL"];

const WarehouseTable = ({ inventory, fetchInventory, deleteItem }) => {
    const [editingItemId, setEditingItemId] = useState(null);
    const [editData, setEditData] = useState({});
    const [newImage, setNewImage] = useState(null);

    const startEditing = (item) => {
        setEditingItemId(item.id);
        setEditData({ ...item });
        setNewImage(null); // –°–±—Ä–æ—Å —Ñ–æ—Ç–æ
    };

    const handleEditChange = (e, field) => {
        setEditData({ ...editData, [field]: e.target.value });
    };

    const handleFileUpload = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append("image", file);

        try {
            const response = await axios.post("http://localhost:5000/api/upload", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });

            setNewImage(response.data.imageUrl); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
        }
    };

    const saveEdit = async () => {
        try {
            const updatedData = { ...editData };
            if (newImage) {
                updatedData.imageUrl = newImage; // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç
            }

            await axios.put(`http://localhost:5000/api/inventory/${editData.id}`, updatedData);
            setEditingItemId(null);
            fetchInventory();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", err);
        }
    };

    return (
        <table border="1" cellPadding="10" style={{ width: "100%" }}>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>–¢–∏–ø</th>
                    <th>–§–æ—Ç–æ</th>
                    <th>–¶–≤–µ—Ç</th>
                    <th>–†–∞–∑–º–µ—Ä</th>
                    <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                {inventory.map((item) => (
                    <tr key={item.id}>
                        <td>{item.id}</td>

                        {/* üîπ –í—ã–±–æ—Ä –∏–ª–∏ –≤–≤–æ–¥ —Ç–∏–ø–∞ */}
                        <td>
                            {editingItemId === item.id ? (
                                <input
                                    list="types"
                                    value={editData.productType}
                                    onChange={(e) => handleEditChange(e, "productType")}
                                />
                            ) : (
                                item.productType
                            )}
                            <datalist id="types">
                                {popularTypes.map((type) => (
                                    <option key={type} value={type} />
                                ))}
                            </datalist>
                        </td>

                        {/* üîπ –§–æ—Ç–æ + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ */}
                        <td>
                            {item.imageUrl ? (
                                <img
                                    src={newImage ? `http://localhost:5000${newImage}` : `http://localhost:5000${item.imageUrl}`}
                                    alt="–¢–æ–≤–∞—Ä"
                                    width="50"
                                    height="50"
                                />
                            ) : (
                                "–ù–µ—Ç —Ñ–æ—Ç–æ"
                            )}
                            {editingItemId === item.id && (
                                <input type="file" onChange={handleFileUpload} />
                            )}
                        </td>

                        {/* üîπ –í—ã–±–æ—Ä –∏–ª–∏ –≤–≤–æ–¥ —Ü–≤–µ—Ç–∞ */}
                        <td>
                            {editingItemId === item.id ? (
                                <input
                                    list="colors"
                                    value={editData.color}
                                    onChange={(e) => handleEditChange(e, "color")}
                                />
                            ) : (
                                item.color
                            )}
                            <datalist id="colors">
                                {popularColors.map((color) => (
                                    <option key={color} value={color} />
                                ))}
                            </datalist>
                        </td>

                        {/* üîπ –í—ã–±–æ—Ä –∏–ª–∏ –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ */}
                        <td>
                            {editingItemId === item.id ? (
                                <input
                                    list="sizes"
                                    value={editData.size}
                                    onChange={(e) => handleEditChange(e, "size")}
                                />
                            ) : (
                                item.size
                            )}
                            <datalist id="sizes">
                                {popularSizes.map((size) => (
                                    <option key={size} value={size} />
                                ))}
                            </datalist>
                        </td>

                        {/* üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
                        <td>
                            {editingItemId === item.id ? (
                                <input
                                    type="number"
                                    value={editData.quantity}
                                    onChange={(e) => handleEditChange(e, "quantity")}
                                />
                            ) : (
                                item.quantity
                            )}
                        </td>

                        {/* üîπ –î–µ–π—Å—Ç–≤–∏—è */}
                        <td>
                            {editingItemId === item.id ? (
                                <button onClick={saveEdit}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            ) : (
                                <button onClick={() => startEditing(item)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                            )}
                            <button onClick={() => deleteItem(item.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                        </td>
                    </tr>
                ))}
            </tbody>
        </table>
    );
};

export default WarehouseTable;
