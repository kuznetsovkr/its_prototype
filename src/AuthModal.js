import React, { useState, useEffect } from "react";
import axios from "axios";

const AuthModal = ({ isAuthModalOpen, toggleAuthModal, onLoginSuccess }) => {
    const [phone, setPhone] = useState("+7 "); // –ù–∞—á–∏–Ω–∞–µ–º —Å +7
    const [smsCode, setSmsCode] = useState("");
    const [password, setPassword] = useState(""); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
    const [step, setStep] = useState(1); // 1 - –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞, 2 - –≤–≤–æ–¥ –∫–æ–¥–∞
    const [errorMessage, setErrorMessage] = useState(""); // –û—à–∏–±–∫–∏

    useEffect(() => {
        if (!isAuthModalOpen) {
            setPhone("+7 ");
            setSmsCode("");
            setPassword(""); // ‚úÖ –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            setStep(1);
            setErrorMessage("");
        }
    }, [isAuthModalOpen]);


    // ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –º–∞—Å–∫—É +7 (999) 999-99-99
    const formatPhoneNumber = (value) => {
        let numbers = value.replace(/\D/g, ""); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã


        if (!numbers.startsWith("7")) {
            numbers = "7" + numbers; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
        }

        return (
            "+7 " +
            (numbers[1] ? `(${numbers.slice(1, 4)}` : "") +
            (numbers[4] ? `) ${numbers.slice(4, 7)}` : "") +
            (numbers[7] ? `-${numbers.slice(7, 9)}` : "") +
            (numbers[9] ? `-${numbers.slice(9, 11)}` : "")
        );
    };

    const handlePhoneChange = (e) => {
        const formattedNumber = formatPhoneNumber(e.target.value);
        setPhone(formattedNumber);
        setErrorMessage(""); // –°–±—Ä–æ—Å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    };

    const validatePhone = () => {
        const cleanNumber = phone.replace(/\D/g, "");
        if (cleanNumber.length !== 11) {
            setErrorMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
            return false;
        }
        return true;
    };

    const handleRequestSMS = async () => {
        if (!validatePhone()) {
            console.log("üö® –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π!");
            return;
        }

        const cleanNumber = phone.replace(/\D/g, ""); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        console.log(`üìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º: ${cleanNumber}`);

        try {
            const response = await axios.post("http://localhost:5000/api/auth/request-sms", { phone: cleanNumber });
            console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);

            if (response.data.message === "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å") {
                // ‚úÖ –≠—Ç–æ –∞–¥–º–∏–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤–º–µ—Å—Ç–æ –∫–æ–¥–∞
                setStep(3); // –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
            } else {
                // ‚úÖ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
                setStep(2);
            }

            setErrorMessage("");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SMS:", error);
            setErrorMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    };


    const handleLogin = async () => {
        if (!smsCode || smsCode.length < 4) {
            setErrorMessage("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∏–∑ SMS.");
            return;
        }

        try {
            const response = await axios.post("http://localhost:5000/api/auth/login", { phone, smsCode });
            localStorage.setItem("token", response.data.token);
            if (onLoginSuccess) onLoginSuccess();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
            setErrorMessage("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    };

    const handleAdminLogin = async () => {
        if (!password) {
            setErrorMessage("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.");
            return;
        }

        try {
            const response = await axios.post("http://localhost:5000/api/auth/admin-login", {
                phone: phone.replace(/\D/g, ""), // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä
                password,
            });

            localStorage.setItem("token", response.data.token);
            localStorage.setItem("role", "admin"); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
            if (onLoginSuccess) onLoginSuccess();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –∞–¥–º–∏–Ω–∞:", error);
            setErrorMessage("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
        }
    };


    return (
        isAuthModalOpen && (
            <div className="modal-overlay" onClick={toggleAuthModal}>
                <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                    <button className="close-button" onClick={toggleAuthModal}>√ó</button>
                    <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h2>

                   {step === 1 ? (
                        <>
                            <label htmlFor="phone">–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                            <input
                                type="tel"
                                id="phone"
                                name="phone"
                                value={phone}
                                onChange={handlePhoneChange}
                                placeholder="+7 (___) ___-__-__"
                                required
                                maxLength={18}
                            />
                            {errorMessage && <p className="error-message">{errorMessage}</p>}

                            <button onClick={handleRequestSMS} className="submit-button">
                                –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥
                            </button>
                        </>
                    ) : step === 2 ? (
                        <>
                            <label htmlFor="smsCode">–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:</label>
                            <input
                                type="text"
                                id="smsCode"
                                name="smsCode"
                                value={smsCode}
                                onChange={(e) => setSmsCode(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"
                                required
                                maxLength={6}
                            />
                            {errorMessage && <p className="error-message">{errorMessage}</p>}

                            <button onClick={handleLogin} className="submit-button">
                                –í–æ–π—Ç–∏
                            </button>
                        </>
                    ) : (
                        // ‚úÖ –ù–æ–≤—ã–π —à–∞–≥ –¥–ª—è –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø–∞—Ä–æ–ª—é
                        <>
                            <label htmlFor="password">–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
                            <input
                                type="password"
                                id="password"
                                name="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                                required
                            />
                            {errorMessage && <p className="error-message">{errorMessage}</p>}

                            <button onClick={handleAdminLogin} className="submit-button">
                                –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω
                            </button>
                        </>
                    )}
                </div>
            </div>
        )
    );
};

export default AuthModal;
