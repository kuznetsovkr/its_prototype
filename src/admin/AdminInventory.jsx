import React, { useState, useEffect } from "react";
import axios from "axios";
import WarehouseTable from "../components/WarehouseTable"; 

const popularTypes = ["–•—É–¥–∏", "–§—É—Ç–±–æ–ª–∫–∞", "–ö–æ—Ñ—Ç–∞", "–°–≤–∏—Ç—à–æ—Ç", "–ú–∞–π–∫–∞"];
const popularColors = ["–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π", "–°–µ—Ä—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π"];
const popularSizes = ["XS", "S", "M", "L", "XL", "XXL"];

const AdminInventory = () => {
    const [inventory, setInventory] = useState([]);
    const [newItem, setNewItem] = useState({
        productType: "",
        color: "",
        size: "",
        quantity: 0,
    });

    useEffect(() => {
        fetchInventory();
    }, []);

    const fetchInventory = async () => {
        try {
            const response = await axios.get("http://localhost:5000/api/inventory");
            setInventory(response.data);
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–ª–∞–¥–∞:", err);
        }
    };

    const updateQuantity = async (id, quantity) => {
        try {
            await axios.put(`http://localhost:5000/api/inventory/${id}`, { quantity });
            fetchInventory();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
        }
    };

    const deleteItem = async (id) => {
        try {
            await axios.delete(`http://localhost:5000/api/inventory/${id}`);
            fetchInventory();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
        }
    };

    const addItem = async () => {
        if (!newItem.productType || !newItem.color || !newItem.size || newItem.quantity <= 0) {
            alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
            return;
        }

        try {
            await axios.post("http://localhost:5000/api/inventory", newItem);
            setNewItem({ productType: "", color: "", size: "", quantity: 0 });
            fetchInventory();
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", err);
        }
    };

    const handleFileUpload = async (event) => {
        const file = event.target.files[0];
        if (!file) return;
    
        const formData = new FormData();
        formData.append("image", file);
    
        try {
            const response = await axios.post("http://localhost:5000/api/upload", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });
    
            setNewItem({ ...newItem, imageUrl: response.data.imageUrl }); // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ `newItem`
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", err);
        }
    };
    

    return (
        <div style={{ padding: "20px" }}>
            <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º</h1>

            {/* üîπ –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
            <div style={{ marginBottom: "20px" }}>
                <label>–¢–∏–ø –æ–¥–µ–∂–¥—ã:</label>
                <input
                    list="types"
                    type="text"
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø"
                    value={newItem.productType}
                    onChange={(e) => setNewItem({ ...newItem, productType: e.target.value })}
                />
                <datalist id="types">
                    {popularTypes.map((type) => (
                        <option key={type} value={type} />
                    ))}
                </datalist>

                <label>–¶–≤–µ—Ç:</label>
                <input
                    list="colors"
                    type="text"
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç"
                    value={newItem.color}
                    onChange={(e) => setNewItem({ ...newItem, color: e.target.value })}
                />
                <datalist id="colors">
                    {popularColors.map((color) => (
                        <option key={color} value={color} />
                    ))}
                </datalist>

                <label>–†–∞–∑–º–µ—Ä:</label>
                <input
                    list="sizes"
                    type="text"
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä"
                    value={newItem.size}
                    onChange={(e) => setNewItem({ ...newItem, size: e.target.value })}
                />
                <datalist id="sizes">
                    {popularSizes.map((size) => (
                        <option key={size} value={size} />
                    ))}
                </datalist>

                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                <input
                    type="number"
                    placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                    value={newItem.quantity}
                    onChange={(e) => setNewItem({ ...newItem, quantity: parseInt(e.target.value) })}
                />
                
                <label>–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label>
                <input type="file" onChange={handleFileUpload} />
                {newItem.imageUrl && <img src={`http://localhost:5000${newItem.imageUrl}`} alt="–ü—Ä–µ–≤—å—é" width="100" />}

                <button onClick={addItem}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>

            <WarehouseTable 
                inventory={inventory} 
                updateQuantity={updateQuantity} 
                deleteItem={deleteItem} 
            />
        </div>
    );
};

export default AdminInventory;
